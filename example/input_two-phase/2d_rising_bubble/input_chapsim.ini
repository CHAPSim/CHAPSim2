#------------------------------------------------------------------------------#
# Description of the given parameters.
# The default flow direction:
#   X = 1 = the streamwise direction, flow direction.
#   Y = 2 = the wall-normal / radial direction.
#   Z = 3 = the spanwise direction.
# var_xdom : includes the number of 'nxdomain' variables
#------------------------------------------------------------------------------#
# In [decomposition], please provide the dimensions for domain
# nxdomain [int]: total domain number in x direction.
# decomposition.
#   p_row [int]: row subdomain, divide Y direction (default, xpencil)
#   p_col [int]: col subdomain, divide Z direction (default, xpencil)
#------------------------------------------------------------------------------#
[decomposition]
nxdomain= 1
p_row= 0
p_col= 0
#------------------------------------------------------------------------------#
# In [domain], please provide the computational domain information.
# scaling: All lengths are scaled by the half channel height or the radius of
# the pipe interior diameter.
#   - The default channel in the wall-normal direction is y in [-1, 1]
#   - The default pipe in the wall-normal direction is r in [0, 1]
#   - The default Taylor Green Vortex Box is 2pi * 2pi * 2pi
# iCase [int]:
#   ICASE_OTHERS  = 0, &
#   ICASE_CHANNEL = 1, &
#   ICASE_PIPE    = 2, &
#   ICASE_ANNUAL  = 3, &
#   ICASE_TGV3D   = 4, &
#   ICASE_TGV2D   = 5, &
#   ICASE_SINETEST= 6, &
#   ICASE_ALGTEST = 7, &
#   ICASE_ROTATE  = 8, &
#   ICASE_VORTEX  = 9
# lxx [double]:
#   - scaled computational length of the streamwise direction
# lzz [double]
#   - scaled computational length of the spanwise direction for the
#     channel flow.
#   - for pipe flow, it is 2pi by default.
#   - Change it to any value < 2pi to get a fan-shaped Domain with
#     periodic spanwise direction.
# lyb [double]
#   - valid only for the annular flow.
#   - the length from the centre of channel /pipe to the bottom of y.
#     eg. - 1.0 for Channel flow, 0 for pipe flow
# lyt [double]
#   - valid only for the annular flow.
#   - the length from the centre of channel /pipe to the top y boundary.
#     eg. 1.0 for channel flow, 1 for pipe flow, 1.0 for nnnular flow.
#------------------------------------------------------------------------------#
[domain]
icase= 0
lxx_xdom= 1.0
lyt= 2.0
lyb= 0.0
lzz= 0.04
#------------------------------------------------------------------------------#
# In [boundary], please provide flow boundary conditions.
# the boundary condition options:
#   IBC_INTERIOR    = 0, &
#   IBC_PERIODIC    = 1, &
#   IBC_SYMMETRIC   = 2, &
#   IBC_ASYMMETRIC  = 3, &
#   IBC_DIRICHLET   = 4, &
#   IBC_NEUMANN     = 5, &
#   IBC_INTRPL      = 6, &
#   IBC_CONVECTIVE  = 7, &
#   IBC_TURBGEN     = 8, &
#   IBC_DATABASE    = 9
# ifbcx1[int, int, int, int, int, real, real, real, real, real ]:
#   u    v   w    p    T,   [u,   v,    w,    p,    T]
#  -5 int  for : bc type
#  -5 real for : bc values, dimensional 
#  -ifbcx1 is for x direction, the index starting side.
#  -ifbcx2 is for x direction, the index ending side. 
# For thermal b.c. : options:
#  THERMAL_BC_CONST_T  = Dirichlet
#  THERMAL_BC_CONST_H  = Neumann
#------------------------------------------------------------------------------#
[boundary]
ifbcx1_u= 1, 1, 0.0, 0.0
ifbcx1_v= 1, 1, 0.0, 0.0
ifbcx1_w= 1, 1, 0.0, 0.0
ifbcx1_p= 1, 1, 0.0, 0.0
ifbcx1_T= 1, 1, 0.0, 0.0
ifbcx1_f= 1, 1, 0.0, 0.0
ifbcy_u=  4, 4, 0.0, 0.0
ifbcy_v=  4, 4, 0.0, 0.0
ifbcy_w=  4, 4, 0.0, 0.0
ifbcy_p=  5, 5, 0.0, 0.0
ifbcy_T=  5, 5, 0.0, 0.0
ifbcy_f=  5, 5, 0.0, 0.0
ifbcz_u=  1, 1, 0.0, 0.0
ifbcz_v=  1, 1, 0.0, 0.0
ifbcz_w=  1, 1, 0.0, 0.0
ifbcz_p=  1, 1, 0.0, 0.0
ifbcz_T=  1, 1, 0.0, 0.0
ifbcz_f=  1, 1, 0.0, 0.0
#------------------------------------------------------------------------------#
# In [mesh], please provide the grid/cell numbers in each direction.
#   X = uniform distribution
#   Z = uniform distribution
#   Y = uniform or clustered/streching distribution
# ncx [int]:
#   - The cell number in the X direction
# ncz [int]:
#   - The cell number in the Z direction.
# ncy [int]:
#   - The cell number in the wall-normal direction.
#   - Cartesian: in the full channel height
#   - Cylindrical: in the radial length
# istret [int]
#   0 = ISTRET_NO
#   2 = ISTRET_2SIDES
#   3 = ISTRET_BOTTOM
#   4 = ISTRET_TOP
#   1 = ISTRET_CENTRE
# rstret [double]:
#   beta value in the stretching function.
#   See Eq.(54) of Laizet2009JCP
#------------------------------------------------------------------------------#
[mesh]
ncx_xdom= 128
ncy=      256
ncz=      5
istret= 0
rstret= 0.1
#------------------------------------------------------------------------------#
# In [timestepping], please provide time stepping related parameters.
# dt[double]:
#   - physical time step (unit: second)
# iTimeScheme[int]: time marching scheme
#   ITIME_RK3    = 3, &
#   ITIME_RK3_CN = 2, &
#   ITIME_AB2    = 1
#------------------------------------------------------------------------------#
;dt= 0.00785398163 (2pi/800)
;dt= 0.01570796326 (2pi/400)
;dt= 0.03141592654 (2pi/200)
;dt= 0.06283185307 (2pi/100)
[timestepping]
dt= 0.00035
iTimeScheme= 3
#------------------------------------------------------------------------------#
# In [schemes], please provide numerical scheme related parameters.
# dt[double]:
#   - physical time step (unit: second)
# iAccuracy[int]: accuracy for the 1st and 2nd deriviative and interpolation.
#   IACCU_CD2 = 2, &
#   IACCU_CD4 = 3, &
#   IACCU_CP4 = 4, &
#   IACCU_CP6 = 6
# iviscous[int]: viscous term treatment
#   2 = semi-implicit
#   1 = explicit
#------------------------------------------------------------------------------#
[schemes]
iAccuracy= 2
iviscous= 1
#------------------------------------------------------------------------------#
# In [flowt], please provide the basic flow information.
# initfl[int], the initial flow option:
#     INIT_RESTART = 0, &
#     INIT_INTERPL = 1, &
#     INIT_RANDOM  = 2, &
#     INIT_INLET   = 3, &
#     INIT_GVCONST = 4, &
#     INIT_POISEUILLE = 5, &
#     INIT_FUNCTION = 6
# irestartfrom[int]
#   - the iteration restart from
# veloinit[double, 3-D], initial velocity 
#   - valid, only initfl = INIT_GVCONST
# noiselevel[double], the velocity perturbaton level
#   - initial velocity = given initial + random * noiselevel
# reninit[double] 
#   - initial Reynolds number
# initReTo
#   - initial Reynolds number last until which iteration
# ren[int]    : 
#   -working Reynolds number
# idriven[int]: driven force type. Options:
#   idriven = 0, no driven force
#   idriven = 1, x, constant mass flow rate driven
#   idriven = 2, x, skin friction, cf (undimensional)
#   idriven = 3, x, pressure drop per unit length (Pa/m)
# drivenCf: the given driven force in format of Cf, Cf =  \tau_w/ (1/2 rho0 U0^2)
#   - Cf   =  \tau_w/ (1/2 rho0 U0^2) = 2 * \tau_w^*
#   - dp/L = \tau_w * S * L
#   - This value is used only when idriven = 2
# igravity[int] : gravity direction
#   0  = not considered
#   -1 = negtive X direction
#   +1 = positive X direction
#   -2 = negtive Y direction
#   +2 = positive Y direction
#   -3 = negtive Z direction
#   +3 = positive Z direction
#------------------------------------------------------------------------------#
[flow]
iflow_xdom= .true.
initfl= 4
irestartfrom= 0
veloinit= 0.0, 0.0, 0.0
noiselevel= 0.
reninit= 70.
initReTo= 3000
ren_xdom= 70.
idriven_xdom= 1
drivenCf_xdom= 0.0E-3
igravity_xdom= -2
#------------------------------------------------------------------------------#
# In [thermo], please provide the thermo-field related information.
# ithermo [int]:
#   0 = No Energy Equation, No Thermodynamics, Default
#   1 = Flow with Thermodynamics.
# ifluid[int] : fluid type
#   ISCP_WATER      = 1, &
#   ISCP_CO2        = 2, &
#   ILIQUID_SODIUM  = 3, &
#   ILIQUID_LEAD    = 4, &
#   ILIQUID_BISMUTH = 5, &
#   ILIQUID_LBE     = 6, &
#   ILIQUID_WATER   = 7
# lenRef[double] : 
#  - Reference length for normalisation. Unit: m
# t0Ref[double]  : 
#  - Reference temperature for normaliaton. Unit: K

# iCHT [int]:
#   0 = No Conjugate Heat Transfer. Default
#   1 = Thermal Flow with Conjugate Heat Transfer.
#------------------------------------------------------------------------------#
[thermo]
ithermo_xdom= .false.
icht_xdom= .false.
ifluid= 3
ref_l0= 1.
ref_T0= 25.0
inittm= 2
irestartfrom= 0
Tini_xdom= 25.0
#------------------------------------------------------------------------------#
# In [vof], please provide the vof related information.
# ivof [logical]:
#   .false. = No VOF Equation, Single phase, Default
#   .true.  = Two phase flow with VOF
# ref_l0[double]:
#  - Reference length for normalisation in case energy equation is not solved.
#    Unit: m
# ifluid[int] : fluid type of the secondary phase (in case of
# thermal solver)
#   ISCP_WATER      = 1, &
#   ISCP_CO2        = 2, &
#   ILIQUID_SODIUM  = 3, &
#   ILIQUID_LEAD    = 4, &
#   ILIQUID_BISMUTH = 5, &
#   ILIQUID_LBE     = 6, &
#   ILIQUID_WATER   = 7
# initvof[int], the initial flow option:
#     INIT_RESTART   = 0, &
#     INIT_INTERPL   = 1, &
#     INIT_SLOTDISK  = 2, &
#     INIT_SLOTSPHERE= 3, &
#     INIT_2DBUB     = 4, &
#     INIT_3DBUB     = 5
# ireconstruct[int], interface reconstruction type:
#   1 = linear
#   2 = quadratic
# isharpness[int], interface sharpness (normally using 1 or 2)
# igradient[int], gradient calculation method for unit normal vector and
# Cartesian curvature tensor
#   1 = simple method
#   2 = Youngs method (Youngs 1984)
# constant fluid properties in case of isothermal solver
# rho1 [double], primary phase density
# rho2 [double], secondary phase density
# mu1  [double], primary phase viscosity
# mu2  [double], secondary phase viscosity
# sigma[double], surface tension coefficient
#------------------------------------------------------------------------------#
[vof]
ivof_xdom= .true.
ref_l0= 1.0
ifluid= 1
initvof= 4
ireconstruct= 2
isharpness= 2
igradient= 2
irestartfrom= 0
rho1= 1000.
rho2= 100.
mu1= 10.
mu2= 1.
sigma0= 24.5

#------------------------------------------------------------------------------#
# In [simcontrol], please provide simulation control related parameters.
# nIterFlowFirst[int]
#   - flow fields simulation starts from
# nIterFlowLast[int]
#   - flow fields simulation ends at
# nIterThermoFirst[int]
#   - thermal fields simulation starts from
# nIterThermoLast[int]
#   - thermal fields simulation ends at
#------------------------------------------------------------------------------#
[simcontrol]
nIterFlowFirst_xdom= 1
nIterFlowLast_xdom= 10000
nIterThermoFirst_xdom= 1
nIterThermoLast_xdom= 20000
nIterVofFirst_xdom= 1
nIterVofLast_xdom= 10000
#------------------------------------------------------------------------------#
# In [ioparams], please provide data output related parameters.
# nfreqckpt[int]
#             - raw data written out every ... iterations
# nfrevisu[int]
#             - visulisation data written out every ... iterations
# itypevisu[int]
#    output data type for visulisation
#    0 for 3D output (default)
#    1 for 2D output with X average
#    2 for 2D output with Y average
#    3 for 2D output with Z average
#    4 for 1D output with XZ average
# nIterStatsStart[int]
#             - from which iteration the statistical results begin to calculate
# nfreqStats[int]
#             - the statistical results written out every ... iteration
#------------------------------------------------------------------------------#
[ioparams]
cpu_nfre= 1
ckpt_nfre_xdom= 500
visu_idim_xdom= 0
visu_nfre_xdom= 500
visu_nskip= 1, 1, 1
stat_istart_xdom= 10000000
stat_nskip= 1, 1, 1
#------------------------------------------------------------------------------#
# In [probe], please provide points information to be monitored.
# All domains should be provided. If there is no probing points in domain n, then
# dmpNnpts= 0.
# dm1npts[int]
#    - specified probing points number in domain 1
#    - followed by the coordinates of the points
#------------------------------------------------------------------------------#
[probe]
dm1npts= 3
0.5, 0.5, 0.005
0.5, 0.75, 0.005
0.75, 0.75, 0.005
