.TH "operations" 3 "Thu Jan 26 2023" "CHAPSim2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
operations
.SH SYNOPSIS
.br
.PP
.SS "Data Types"

.in +1c
.ti -1c
.RI "type \fBt_xtdma_lhs\fP"
.br
.in -1c
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine, private \fBprepare_compact_coefficients\fP (iaccu)"
.br
.RI "Assigned the cooefficients for the compact schemes 
.br
 Scope: mpi called-freq xdomain module all once specified private\&. "
.ti -1c
.RI "subroutine, private \fBbuildup_tdma_lhs_array\fP (n, is_periodic, coeff, a, b, c, d)"
.br
.RI "Assigning the sparse matrix in the LHS of the compact scheme, and calculating the geometry-only dependent variables for the TDMA scheme\&. "
.ti -1c
.RI "subroutine, public \fBprepare_lhs_coeffs_for_operations\fP"
.br
.RI "Preparing coefficients for TDMA calculation\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_interp_p2c_rhs_array\fP (fi, fo, nc, coeff, ibc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for interpolation\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the interpolation\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_interp_c2p_rhs_array\fP (fi, fo, np, coeff, ibc, fbc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for interpolation\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the interpolation\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_1deri_c2c_rhs_array\fP (fi, fo, nc, coeff, dd, ibc, fbc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_1deri_p2p_rhs_array\fP (fi, fo, np, coeff, dd, ibc, fbc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_1deri_c2p_rhs_array\fP (fi, fo, np, coeff, dd, ibc, fbc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_1deri_p2c_rhs_array\fP (fi, fo, nc, coeff, dd, ibc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_2deri_c2c_rhs_array\fP (fi, fo, nc, coeff, dd, ibc, fbc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, private \fBprepare_tdma_2deri_p2p_rhs_array\fP (fi, fo, np, coeff, dd, ibc)"
.br
.RI "Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. "
.ti -1c
.RI "subroutine, public \fBget_x_midp_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.RI "To caculate the mid-point interpolation in 1D\&. This subroutine is called as required to get the mid-point interpolation\&. "
.ti -1c
.RI "subroutine, public \fBget_x_midp_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_midp_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_midp_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_midp_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_midp_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.RI "To caculate the 1st derivative in 1D\&. This subroutine is called as required to get the 1st derivative\&. "
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_p2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_p2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_p2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_c2p_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_p2c_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_2nd_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.RI "To caculate the 2nd derivative in 1D\&. This subroutine is called as required to get the 2nd derivative\&. "
.ti -1c
.RI "subroutine, public \fBget_x_2nd_derivative_p2p_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_2nd_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_2nd_derivative_p2p_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_2nd_derivative_c2c_1d\fP (fi, fo, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_2nd_derivative_p2p_1d\fP (fi, fo, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_midp_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.RI "To caculate the mid-point interpolation in 3D\&. "
.ti -1c
.RI "subroutine, public \fBget_x_midp_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_midp_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_midp_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_midp_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_midp_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.RI "To caculate the 1st-deriviate in 3D\&. "
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_1st_derivative_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_1st_derivative_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_c2p_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_1st_derivative_p2c_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_x_2nd_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.RI "To caculate the 2nd-deriviate in 3D\&. "
.ti -1c
.RI "subroutine, public \fBget_x_2nd_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_2nd_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_y_2nd_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_2nd_derivative_c2c_3d\fP (fi3d, fo3d, dm, ibc, fbc)"
.br
.ti -1c
.RI "subroutine, public \fBget_z_2nd_derivative_p2p_3d\fP (fi3d, fo3d, dm, ibc)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save, public \fBd1fc2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save, public \fBd1rc2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save \fBd1fp2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save \fBd1rp2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save, public \fBd1fc2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save, public \fBd1rc2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save \fBd1fp2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save \fBd1rp2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save, public \fBd2fc2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save, public \fBd2rc2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save \fBd2fp2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save \fBd2rp2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save \fBm1fp2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save \fBm1rp2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 3, 6), save, public \fBm1fc2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(5, 4, 6), save, public \fBm1rc2p\fP"
.br
.ti -1c
.RI "type(\fBt_xtdma_lhs\fP), dimension(:), allocatable \fBxtdma_lhs\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad2y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd2y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd2y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd2y_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad2y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd2y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd2y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd2y_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBam1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbm1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcm1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdm1y_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBam1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbm1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcm1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdm1y_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad2z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd2z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd2z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd2z_p2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBad2z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbd2z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcd2z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdd2z_c2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBam1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbm1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcm1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdm1z_p2c\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBam1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBbm1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBcm1z_c2p\fP"
.br
.ti -1c
.RI "real(wp), dimension(:, :, :), allocatable \fBdm1z_c2p\fP"
.br
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine, private operations::buildup_tdma_lhs_array (integer, intent(in) n, logical, intent(in) is_periodic, real(wp), dimension(5, 3, 6), intent(in) coeff, real(wp), dimension(n, 6, 6), intent(out) a, real(wp), dimension(n, 6, 6), intent(out) b, real(wp), dimension(n, 6, 6), intent(out) c, real(wp), dimension(n, 6, 6), intent(out) d)\fC [private]\fP"

.PP
Assigning the sparse matrix in the LHS of the compact scheme, and calculating the geometry-only dependent variables for the TDMA scheme\&. This subroutine is called once locally\&. 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknown array 
.br
\fIbc\fP the boundary condition at two ends of the unknown 
.br
\fIcoeff\fP the basic TDMA coefficients defined above\&. 
.br
\fIa\fP the coefficients for TDMA 
.br
\fIb\fP a_i * x_(i-1) + b_i * x_(i) + c_i * x_(i+1) 
.br
\fIc\fP = RHS 
.br
\fId\fP An assisting coeffients for the TDMA scheme\&. 
.RE
.PP

.SS "subroutine, public operations::get_x_1st_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the 1st derivative in 1D\&. This subroutine is called as required to get the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_1st_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the 1st-deriviate in 3D\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_1st_derivative_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_x_1st_derivative_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_x_1st_derivative_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_x_1st_derivative_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_x_1st_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_x_1st_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_x_2nd_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the 2nd derivative in 1D\&. This subroutine is called as required to get the 2nd derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_2nd_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the 2nd-deriviate in 3D\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_2nd_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_x_2nd_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_x_midp_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the mid-point interpolation in 1D\&. This subroutine is called as required to get the mid-point interpolation\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_midp_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.PP
To caculate the mid-point interpolation in 3D\&. Scope: mpi called-freq xdomain module in-given pencil needed specified pubic 
.PP
\fBParameters\fP
.RS 4
\fIixsub\fP x-subdomain index 
.br
\fIibc\fP bc type 
.br
\fIfbc\fP bc value 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIfi\fP the input array of original variable 
.br
\fIfo\fP the output array of interpolated variable 
.RE
.PP

.SS "subroutine, public operations::get_x_midp_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_x_midp_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_1st_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_1st_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_1st_derivative_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_1st_derivative_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_1st_derivative_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_1st_derivative_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_1st_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_1st_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_2nd_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_2nd_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_2nd_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_2nd_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_midp_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_midp_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_y_midp_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_y_midp_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_1st_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_1st_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_1st_derivative_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_1st_derivative_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_1st_derivative_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_1st_derivative_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_1st_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_1st_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_2nd_derivative_c2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_2nd_derivative_c2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_2nd_derivative_p2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_2nd_derivative_p2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_midp_c2p_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_midp_c2p_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)"

.SS "subroutine, public operations::get_z_midp_p2c_1d (real(wp), dimension(:), intent(in) fi, real(wp), dimension(:), intent(out) fo, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, public operations::get_z_midp_p2c_3d (real(wp), dimension(:, :, :), intent(in) fi3d, real(wp), dimension(:, :, :), intent(out) fo3d, type(\fBt_domain\fP), intent(in) dm, integer, dimension(2), intent(in) ibc)"

.SS "subroutine, private operations::prepare_compact_coefficients (integer, intent(in) iaccu)\fC [private]\fP"

.PP
Assigned the cooefficients for the compact schemes 
.br
 Scope: mpi called-freq xdomain module all once specified private\&. 
.PP
\fBParameters\fP
.RS 4
\fIiaccu\fP the accuracy given by user 
.RE
.PP

.SS "subroutine, public operations::prepare_lhs_coeffs_for_operations"

.PP
Preparing coefficients for TDMA calculation\&. Scope: mpi called-freq xdomain all once all 
.SS "subroutine, private operations::prepare_tdma_1deri_c2c_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(nc), intent(out) fo, integer, intent(in) nc, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is np 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_1deri_c2p_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(np), intent(out) fo, integer, intent(in) np, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is np 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_1deri_p2c_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(nc), intent(out) fo, integer, intent(in) nc, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is np 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_1deri_p2p_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(np), intent(out) fo, integer, intent(in) np, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is np 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_2deri_c2c_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(nc), intent(out) fo, integer, intent(in) nc, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is nc 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_2deri_p2p_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(np), intent(out) fo, integer, intent(in) np, real(wp), dimension(5, 4, 6), intent(in) coeff, real(wp), intent(in) dd, integer, dimension(2), intent(in) ibc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for 1st derivative\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the 1st derivative\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is nc 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIdd\fP 1/spacing, ie\&. 1/dx, 1/dy, 1/dz 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_interp_c2p_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(np), intent(out) fo, integer, intent(in) np, real(wp), dimension(5, 4, 6), intent(in) coeff, integer, dimension(2), intent(in) ibc, real(wp), dimension(2), intent(in), optional fbc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for interpolation\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the interpolation\&. Scope: mpi called-freq xdomain module in-given pencil needed specified private Y: index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is np 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SS "subroutine, private operations::prepare_tdma_interp_p2c_rhs_array (real(wp), dimension(:), intent(in) fi, real(wp), dimension(nc), intent(out) fo, integer, intent(in) nc, real(wp), dimension(5, 4, 6), intent(in) coeff, integer, dimension(2), intent(in) ibc)\fC [private]\fP"

.PP
Preparing the RHS array for the TDMA algorithm for interpolation\&. This subroutine is called repeatly to update the RHS of the TDMA algorithm for the interpolation\&. Scope: mpi called-freq xdomain module given pencil needed specified private index arrangment j'-1 j'-1 j' j'+1 j'+2 _|__\&.__|__\&.__|__\&.__|__\&.__|__\&.__ j-2 j-1 j j+1 j+2 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of unknowns, here is nc 
.br
\fIibc\fP the b\&.c\&. type at two ends of the unknown array 
.br
\fIfbc\fP the b\&.c\&. values for the given ibc 
.br
\fIinbr\fP the neibouring index of 4 bc nodes 
.br
\fIcoeff\fP the defined TDMA coefficients 
.br
\fIfi\fP the input variable to build up the RHS array 
.br
\fIfo\fP the output RHS array 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "real(wp), dimension(:, :, :), allocatable operations::ad1y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad1z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad2y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad2y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad2z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::ad2z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::am1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::am1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::am1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::am1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd1z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd2y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd2y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd2z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bd2z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bm1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bm1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bm1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::bm1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd1z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd2y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd2y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd2z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cd2z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cm1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cm1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cm1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::cm1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(5, 3, 6), save, public operations::d1fc2c"

.SS "real(wp), dimension(5, 3, 6), save, public operations::d1fc2p"

.SS "real(wp), dimension(5, 3, 6), save operations::d1fp2c\fC [private]\fP"

.SS "real(wp), dimension(5, 3, 6), save operations::d1fp2p\fC [private]\fP"

.SS "real(wp), dimension(5, 4, 6), save, public operations::d1rc2c"

.SS "real(wp), dimension(5, 4, 6), save, public operations::d1rc2p"

.SS "real(wp), dimension(5, 4, 6), save operations::d1rp2c\fC [private]\fP"

.SS "real(wp), dimension(5, 4, 6), save operations::d1rp2p\fC [private]\fP"

.SS "real(wp), dimension(5, 3, 6), save, public operations::d2fc2c"

.SS "real(wp), dimension(5, 3, 6), save operations::d2fp2p\fC [private]\fP"

.SS "real(wp), dimension(5, 4, 6), save, public operations::d2rc2c"

.SS "real(wp), dimension(5, 4, 6), save operations::d2rp2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd1z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd2y_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd2y_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd2z_c2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dd2z_p2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dm1y_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dm1y_p2c\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dm1z_c2p\fC [private]\fP"

.SS "real(wp), dimension(:, :, :), allocatable operations::dm1z_p2c\fC [private]\fP"

.SS "real(wp), dimension(5, 3, 6), save, public operations::m1fc2p"

.SS "real(wp), dimension(5, 3, 6), save operations::m1fp2c\fC [private]\fP"

.SS "real(wp), dimension(5, 4, 6), save, public operations::m1rc2p"

.SS "real(wp), dimension(5, 4, 6), save operations::m1rp2c\fC [private]\fP"

.SS "type(\fBt_xtdma_lhs\fP), dimension(:), allocatable operations::xtdma_lhs"

.SH "Author"
.PP 
Generated automatically by Doxygen for CHAPSim2 from the source code\&.
